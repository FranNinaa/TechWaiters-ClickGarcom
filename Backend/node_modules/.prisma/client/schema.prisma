// Define o cliente do Prisma que será utilizado para interagir com o banco de dados
generator client {
  provider = "prisma-client-js"
}

// Define a fonte de dados (datasource), neste caso, um banco de dados PostgreSQL
datasource db {
  provider = "postgresql" // Tipo do banco de dados
  url      = env("DATABASE_URL") // URL de conexão, obtida a partir das variáveis de ambiente
}

// Modelo para usuário
model Usuario {
  Id         String   @id @default(uuid()) // Identificador único gerado automaticamente
  Nome       String 
  Email      String 
  Password   String 
  created_at DateTime @default(now()) 
  updated_at DateTime @default(now()) 

  @@map("usuario") // Mapeia este modelo para a tabela "usuario" no banco de dados
}

// Modelo para categoria, incluindo campos para ID, nome, e timestamps. Categorias podem ter vários produtos associados
model Categoria {
  Id         String    @id @default(uuid()) // Identificador único gerado automaticamente
  Nome       String 
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  produtos   Produto[] // Relacionamento: Uma categoria possui muitos produtos

  @@map("categoria") // Mapeia este modelo para a tabela "categoria" no banco de dados
}

// Modelo para produto
model Produto {
  Id         String   @id @default(uuid()) // Identificador único gerado automaticamente
  Nome       String 
  Descricao  String 
  Preco      String 
  Banner     String 
  created_at DateTime @default(now()) 
  updated_at DateTime @default(now()) 

  categoria    Categoria @relation(fields: [categoria_id], references: [Id]) // Relação com Categoria

  @@map("produto") // Mapeia este modelo para a tabela "produto" no banco de dados

  categoria_id String // Campo para armazenar o ID da categoria relacionada
  itensPedidos ItemPedido[] // Relacionamento: Um produto pode estar em muitos itens de pedidos
}

// Modelo para pedido
model Pedido {
  Id         String   @id @default(uuid()) // Identificador único gerado automaticamente
  Mesa       Int 
  Status     Boolean  @default(false) // Status do pedido (finalizado ou não)
  Rascunho   Boolean  @default(true) // Se o pedido é um rascunho (ainda não finalizado)
  Nome       String? // Nome opcional para o pedido

  created_at DateTime @default(now()) 
  updated_at DateTime @default(now()) 

  @@map("pedido") // Mapeia este modelo para a tabela "pedido" no banco de dados

   itensPedidos ItemPedido[] // Relacionamento: Um pedido pode ter muitos itens
}

// Modelo para item de pedido
model ItemPedido {
  Id         String   @id @default(uuid()) 
  Quantidade Int 
  Observacao String? 
  created_at DateTime @default(now()) 
  updated_at DateTime @default(now())
  
  pedido Pedido @relation(fields: [pedido_id], references: [Id]) // Relação com Pedido

  produto Produto @relation(fields: [produto_id], references: [Id]) // Relação com Produto

  @@map("itens") // Mapeia este modelo para a tabela "itens" no banco de dados
  
  pedido_id String // Campo para armazenar o ID do pedido relacionado
  produto_id String // Campo para armazenar o ID do produto relacionado
}
